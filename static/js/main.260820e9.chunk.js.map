{"version":3,"sources":["utils/RecordsAPI.js","components/Record.js","components/RecordForm.js","components/AmountBox.js","components/Records.js","serviceWorker.js","index.js"],"names":["api","process","REACT_APP_RECORDS_API_URL","create","body","axios","post","update","id","put","remove","delete","Record","props","handleToggle","setState","edit","state","handleEdit","event","preventDefault","data","date","refs","value","title","amount","RecordsAPI","record","then","response","handleUpdateRecord","catch","error","console","log","message","handleDelte","handleDeleteRecord","type","className","defaultValue","this","ref","onClick","renderForm","renderRow","Component","RecordForm","handleChange","name","obj","target","handleSubmit","Number","parseInt","handleNewRecord","onSubmit","placeholder","onChange","disabled","valid","AmountBox","text","Records","isLoaded","records","get","oldRecord","newRecord","index","indexOf","newRecords","map","item","i","recordIndex","filter","credits","reduce","total","curr","debits","recordsComponent","key","updateRecord","bind","delteRecord","balance","addRecord","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.260820e9.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst api = process.env.REACT_APP_RECORDS_API_URL || \"http://5dcd5c99d795470014e4d032.mockapi.io\"\n\nexport const getAll = () => {\n    return axios.get(`${api}/api/v1/records`)\n}\n\nexport const create = (body) => {\n    return axios.post(`${api}/api/v1/records`, body)\n}\n\nexport const update = (id, body) => {\n    return axios.put(`${api}/api/v1/records/${id}`, body)\n}\n\nexport const remove = (id) => {\n    return axios.delete(`${api}/api/v1/records/${id}`)\n}\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport * as RecordsAPI from '../utils/RecordsAPI';\n\nexport default class Record extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            edit: false\n        }\n    }\n\n\n    handleToggle = () => {\n        this.setState({edit: !this.state.edit});\n    }\n\n    handleEdit = (event) => {\n        event.preventDefault();\n        const data = {\n            date: this.refs.date.value,\n            title: this.refs.title.value,\n            amount: this.refs.amount.value\n        };\n        RecordsAPI.update(this.props.record.id, data).then(\n            response => {\n                this.setState({edit: false});\n                this.props.handleUpdateRecord(this.props.record, response.data);\n            }\n        ).catch(\n            error => console.log(error.message)\n        );\n    }\n\n    handleDelte = () => {\n        RecordsAPI.remove(this.props.record.id).then(\n            response => this.props.handleDeleteRecord(this.props.record)\n        ).catch(\n            error => console.log(error.message)\n        )\n    }\n\n    renderForm() {\n        return (\n            <tr>\n                <td><input type=\"text\" className=\"form-control\" defaultValue={this.props.record.date} ref=\"date\"/></td>\n                <td><input type=\"text\" className=\"form-control\" defaultValue={this.props.record.title} ref=\"title\"/>\n                </td>\n                <td><input type=\"text\" className=\"form-control\" defaultValue={this.props.record.amount} ref=\"amount\"/>\n                </td>\n                <td>\n                    <button className=\"btn btn-info mr-1\" onClick={this.handleEdit}>Update</button>\n                    <button className=\"btn btn-danger\" onClick={this.handleToggle}>Cancel</button>\n                </td>\n            </tr>)\n    }\n\n    renderRow() {\n        return (\n            <tr>\n                <td>{this.props.record.date}</td>\n                <td>{this.props.record.title}</td>\n                <td>{this.props.record.amount}</td>\n                <td>\n                    <button className=\"btn btn-info mr-1\" onClick={this.handleToggle}>Edit</button>\n                    <button className=\"btn btn-danger\" onClick={this.handleDelte}>Delete</button>\n                </td>\n            </tr>)\n    }\n\n    render() {\n        if (this.state.edit) {\n            return this.renderForm()\n        } else {\n            return this.renderRow()\n        }\n    }\n}\n\nRecord.propTypes = {\n    record: PropTypes.object\n}\n\n","import React, {Component} from 'react';\nimport * as RecordsAPI from '../utils/RecordsAPI'\n\nexport default class RecordForm extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            date: \"\",\n            title: \"\",\n            amount: \"\"\n        }\n    }\n\n    handleChange = (event) => {\n        let obj = {}, name, value;\n        name = event.target.name + \"\";\n        value = event.target.value;\n        obj[name] = value;\n        this.setState(obj);\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        const data = {\n            date: this.state.date,\n            title: this.state.title,\n            amount: Number.parseInt(this.state.amount)\n        };\n        RecordsAPI.create(data).then(\n            response => {\n                this.props.handleNewRecord(response.data);\n                this.setState({\n                    date: \"\",\n                    title: \"\",\n                    amount: \"\"\n                })\n            }\n        ).catch(\n            error => console.log(error.message)\n        );\n\n    }\n\n    valid() {\n        return this.state.date && this.state.title && this.state.amount;\n    }\n\n\n    render() {\n\n        return (\n            <form className=\"form-inline mb-3\" onSubmit={this.handleSubmit}>\n                <div className=\"form-group mr-1\">\n                    <input type=\"text\" className=\"form-control\" placeholder=\"Date\" name=\"date\"\n                           onChange={this.handleChange} value={this.state.date}/>\n                </div>\n                <div className=\"form-group mr-1\">\n                    <input type=\"text\" className=\"form-control\" placeholder=\"Title\" name=\"title\"\n                           onChange={this.handleChange} value={this.state.title}/>\n                </div>\n                <div className=\"form-group mr-1\">\n                    <input type=\"text\" className=\"form-control\" placeholder=\"Amount\" name=\"amount\"\n                           onChange={this.handleChange} value={this.state.amount}/>\n                </div>\n                <button type=\"submit\" className=\"btn btn-primary\" disabled={!this.valid()}>Create Record</button>\n            </form>\n        )\n    }\n}\n","import React from 'react'\n\n\nconst AmountBox = (props) => {\n    const {text, type, amount} = props;\n    return (\n        <div className=\"col\">\n            <div className=\"card\">\n                <div className={`card-header bg-${type} text-white`}>\n                    {text}\n                </div>\n                <div className=\"card-body\">\n                    {amount}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default AmountBox;\n","import React, {Component} from 'react';\nimport Record from './Record';\nimport RecordForm from './RecordForm';\nimport AmountBox from './AmountBox';\nimport * as RecordsAPI from '../utils/RecordsAPI'\n\nexport default class Records extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            error: null,\n            isLoaded: false,\n            records: []\n        }\n    }\n\n    componentDidMount() {\n        RecordsAPI.getAll().then(\n            (response) => this.setState({\n                records: response.data,\n                isLoaded: true\n            })).catch(\n            (error) => this.setState({\n                isLoaded: true,\n                error\n            }))\n    }\n\n    addRecord(record) {\n        this.setState({\n            records: [...this.state.records, record]\n        });\n    }\n\n    updateRecord(oldRecord, newRecord) {\n        const index = this.state.records.indexOf(oldRecord);\n        const newRecords = this.state.records.map((item, i) => {\n            if (i !== index) {\n                return item;\n            } else {\n                return {...item, ...newRecord}\n            }\n        });\n        this.setState({records: newRecords});\n    }\n\n    delteRecord(record) {\n        const recordIndex = this.state.records.indexOf(record);\n        const newRecords = this.state.records.filter((item, index) => index !== recordIndex)\n        this.setState({records: newRecords});\n    }\n\n    credits() {\n        let credits = this.state.records.filter((item) => {\n            return item.amount >= 0\n        })\n        return credits.reduce((total, curr) => {\n            return total + parseInt(curr.amount);\n        }, 0);\n    }\n\n    debits() {\n        let debits = this.state.records.filter((item) => {\n            return item.amount < 0\n        })\n        return debits.reduce((total, curr) => {\n            return total + parseInt(curr.amount);\n        }, 0);\n    }\n\n    balance() {\n        return this.credits() + this.debits();\n    }\n\n\n    render() {\n        const {error, isLoaded, records} = this.state;\n        let recordsComponent = null;\n        if (error) {\n            recordsComponent = <div>Error:{error.message}</div>\n        } else if (!isLoaded) {\n            recordsComponent = <div>Loading...</div>\n        } else {\n            recordsComponent = (\n                <table className=\"table table-bordered\">\n                    <thead>\n                    <tr>\n                        <th>Date</th>\n                        <th>Title</th>\n                        <th>Amount</th>\n                        <th>Action</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {records.map((record) =>\n                        <Record key={record.id} record={record}\n                                handleUpdateRecord={this.updateRecord.bind(this)}\n                                handleDeleteRecord={this.delteRecord.bind(this)}\n                        />\n                    )\n                    }\n                    </tbody>\n                </table>\n            );\n        }\n\n        return (\n            <div>\n                <h2>Records</h2>\n                <div className=\"row mb-3\">\n                    <AmountBox text=\"Credit\" type=\"success\" amount={this.credits()}/>\n                    <AmountBox text=\"Debit\" type=\"danger\" amount={this.debits()}/>\n                    <AmountBox text=\"Balance\" type=\"info\" amount={this.balance()}/>\n                </div>\n                <RecordForm handleNewRecord={this.addRecord.bind(this)}/>\n                {recordsComponent}\n            </div>\n        )\n    }\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Records from './components/Records';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Records />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}